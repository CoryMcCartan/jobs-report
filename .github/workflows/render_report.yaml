# MIT License
# Copyright (c) 2021 Eli Lilly and Company
# Author: William Michael Landau (will.landau at gmail)
# Written with help from public domain (CC0 1.0 Universal) workflow files by Jim Hester:
# * https://github.com/r-lib/actions/blob/master/examples/check-full.yaml
# * https://github.com/r-lib/actions/blob/master/examples/blogdown.yaml
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

on:
  push:
    branches:
      - main

name: render_report

jobs:
  targets:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUBPAT }}
      FRED_KEY: ${{ secrets.FRED_KEY }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: jobs-report
      - uses: r-lib/actions/setup-r@master
      - uses: r-lib/actions/setup-pandoc@master

      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libcurl4-openssl-dev
          sudo apt-get install libssl-dev
          sudo apt-get install libzmq3-dev

      - name: Cache packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-2-
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-2-

      - name: Query dependencies
        working-directory: jobs-report
        run: Rscript run.R deps

      - name: Cache packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.txt') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install packages
        working-directory: jobs-report
        run: Rscript run.R install

      - name: Check if previous runs exist
        working-directory: jobs-report
        id: runs-exist
        run: git ls-remote --exit-code --heads origin targets-runs
        continue-on-error: true

      - name: Checkout previous run
        if: steps.runs-exist.outcome == 'success'
        uses: actions/checkout@v2
        with:
          working-directory: jobs-report
          ref: targets-runs
          fetch-depth: 1
          path: .targets-runs

      - name: Restore output files from the previous run
        working-directory: jobs-report
        if: steps.runs-exist.outcome == 'success'
        run: |
          for (dest in scan(".targets-runs/.targets-files", what = character())) {
            source <- file.path(".targets-runs", dest)
            if (!file.exists(dirname(dest))) dir.create(dirname(dest), recursive = TRUE)
            if (file.exists(source)) file.rename(source, dest)
          }
        shell: Rscript {0}

      - name: Run targets pipeline
        working-directory: jobs-report
        run: targets::tar_make()
        shell: Rscript {0}
        continue-on-error: true

      - name: Identify files that the targets pipeline produced
        working-directory: jobs-report
        run: git ls-files -mo --exclude=renv > .targets-files

      - name: Create the runs branch if it does not already exist
        working-directory: jobs-report
        if: steps.runs-exist.outcome != 'success'
        run: git checkout --orphan targets-runs

      - name: Put the worktree in the runs branch if the latter already exists
        working-directory: jobs-report
        if: steps.runs-exist.outcome == 'success'
        run: |
          rm -r .git
          mv .targets-runs/.git .
          rm -r .targets-runs

      - name: Upload latest run
        working-directory: jobs-report
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          rm .gitignore
          git add --all -- ':!renv'
          for file in $(git ls-files -mo --exclude=renv)
          do
            git add $file
          done
          git commit -am "Run pipeline"
          git push origin targets-runs

      - name: Checkout website
        if: steps.runs-exist.outcome == 'success'
        uses: actions/checkout@v2
        with:
          working-directory: .
          repository: CoryMcCartan/website/
          fetch-depth: 1
          path: website

      - name: Make website report
        working-directory: jobs-report
        run: Rscript run.R render ../website/content/projects

      - name: Deploy website
        working-directory: website
        run: |
          git add .
          git commit -m "render jobs report"
          git push origin master
          ./deploy.sh

